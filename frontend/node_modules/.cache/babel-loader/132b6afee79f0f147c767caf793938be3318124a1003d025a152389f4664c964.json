{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8081/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for adding auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor for handling token expiration\napi.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authApi = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials)\n};\n\n// Spaces API\nexport const spacesApi = {\n  getAllSpaces: () => api.get('/spaces'),\n  getSeatPlaces: spaceId => api.get(`/spaces/${spaceId}/seat-places`)\n};\n\n// Bookings API\nexport const bookingsApi = {\n  createBooking: bookingRequest => api.post('/bookings', bookingRequest),\n  getMyBookings: () => api.get('/bookings/my')\n};\n\n// Types\n\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","window","location","href","authApi","register","userData","post","login","credentials","spacesApi","getAllSpaces","get","getSeatPlaces","spaceId","bookingsApi","createBooking","bookingRequest","getMyBookings"],"sources":["/app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Space, SeatPlace, Booking, BookingRequest } from '../types';\n\nconst API_URL = 'http://localhost:8081/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor for adding auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor for handling token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // Token expired or invalid\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authApi = {\n  register: (userData: {\n    name: string;\n    surname: string;\n    patronymic?: string;\n    alias: string;\n    password: string;\n  }) => api.post<{ token: string }>('/auth/register', userData),\n  login: (credentials: { alias: string; password: string }) =>\n    api.post<{ token: string }>('/auth/login', credentials),\n};\n\n// Spaces API\nexport const spacesApi = {\n  getAllSpaces: () => api.get<Space[]>('/spaces'),\n  getSeatPlaces: (spaceId: string) => api.get<SeatPlace[]>(`/spaces/${spaceId}/seat-places`),\n};\n\n// Bookings API\nexport const bookingsApi = {\n  createBooking: (bookingRequest: BookingRequest) => api.post<Booking>('/bookings', bookingRequest),\n  getMyBookings: () => api.get<Booking[]>('/bookings/my'),\n};\n\n// Types\nexport interface RegisterRequest {\n  name: string;\n  surname: string;\n  patronymic?: string;\n  alias: string;\n  password: string;\n}\n\nexport interface LoginRequest {\n  alias: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n}\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,OAAO,GAAG;EACrBC,QAAQ,EAAGC,QAMV,IAAKtB,GAAG,CAACuB,IAAI,CAAoB,gBAAgB,EAAED,QAAQ,CAAC;EAC7DE,KAAK,EAAGC,WAAgD,IACtDzB,GAAG,CAACuB,IAAI,CAAoB,aAAa,EAAEE,WAAW;AAC1D,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG;EACvBC,YAAY,EAAEA,CAAA,KAAM3B,GAAG,CAAC4B,GAAG,CAAU,SAAS,CAAC;EAC/CC,aAAa,EAAGC,OAAe,IAAK9B,GAAG,CAAC4B,GAAG,CAAc,WAAWE,OAAO,cAAc;AAC3F,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG;EACzBC,aAAa,EAAGC,cAA8B,IAAKjC,GAAG,CAACuB,IAAI,CAAU,WAAW,EAAEU,cAAc,CAAC;EACjGC,aAAa,EAAEA,CAAA,KAAMlC,GAAG,CAAC4B,GAAG,CAAY,cAAc;AACxD,CAAC;;AAED;;AAkBA,eAAe5B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}