{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8081/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for adding auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor for handling token expiration\napi.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authApi = {\n  register: data => api.post('/auth/register', data),\n  login: data => api.post('/auth/login', data)\n};\n\n// Types\n\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","window","location","href","authApi","register","data","post","login"],"sources":["/Users/nestyurkin_p/Programming/JavaProjects/final 8/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8081/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor for adding auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor for handling token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // Token expired or invalid\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authApi = {\n  register: (data: RegisterRequest) => api.post('/auth/register', data),\n  login: (data: LoginRequest) => api.post('/auth/login', data),\n};\n\n// Types\nexport interface RegisterRequest {\n  name: string;\n  surname: string;\n  patronymic?: string;\n  alias: string;\n  password: string;\n}\n\nexport interface LoginRequest {\n  alias: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n}\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,OAAO,GAAG;EACrBC,QAAQ,EAAGC,IAAqB,IAAKtB,GAAG,CAACuB,IAAI,CAAC,gBAAgB,EAAED,IAAI,CAAC;EACrEE,KAAK,EAAGF,IAAkB,IAAKtB,GAAG,CAACuB,IAAI,CAAC,aAAa,EAAED,IAAI;AAC7D,CAAC;;AAED;;AAkBA,eAAetB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}